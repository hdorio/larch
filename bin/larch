#!/usr/bin/env ruby

require 'rubygems'
require 'highline/import' # optional dep: termios
require 'trollop'

require 'larch'

module Larch

  # Parse command-line options.
  options = Trollop.options do
    version "Larch #{APP_VERSION}\n" << APP_COPYRIGHT
    banner <<EOS
Larch syncs messages from one IMAP server to another. Awesomely.

Usage:
  larch --from <uri> --to <uri> [options]

Required:
EOS
    opt :from, "URI of the source IMAP server.", :short => '-f', :type => :string, :required => true
    opt :to,   "URI of the destination IMAP server.", :short => '-t', :type => :string, :required => true

    text "\nCopy Options:"
    opt :all,              "Copy all folders recursively", :short => :none
    opt :all_subscribed,   "Copy all subscribed folders recursively", :short => :none
    opt :exclude,          "List of mailbox names/patterns that shouldn't be copied", :short => :none, :type => :strings, :multi => true
    opt :exclude_file,     "Filename containing mailbox names/patterns that shouldn't be copied", :short => :none, :type => :string
    opt :from_folder,      "Source folder to copy from", :short => :none, :default => 'INBOX'
    opt :from_pass,        "Source server password (default: prompt)", :short => :none, :type => :string
    opt :from_user,        "Source server username (default: prompt)", :short => :none, :type => :string
    opt :to_folder,        "Destination folder to copy to", :short => :none, :default => 'INBOX'
    opt :to_pass,          "Destination server password (default: prompt)", :short => :none, :type => :string
    opt :to_user,          "Destination server username (default: prompt)", :short => :none, :type => :string

    text "\nGeneral Options:"
    opt :dry_run,          "Don't actually make any changes.", :short => '-n'
    opt :fast_scan,        "Use a faster (but less accurate) method to scan mailboxes. This may result in messages being re-copied.", :short => :none
    opt :max_retries,      "Maximum number of times to retry after a recoverable error", :short => :none, :default => 3
    opt :no_create_folder, "Don't create destination folders that don't already exist", :short => :none
    opt :ssl_certs,        "Path to a trusted certificate bundle to use to verify server SSL certificates", :short => :none, :type => :string
    opt :ssl_verify,       "Verify server SSL certificates", :short => :none
    opt :verbosity,        "Output verbosity: debug, info, warn, error, or fatal", :short => '-V', :default => 'info'
    opt :unread,           "Copy only unread/unseen message from source folder", :short => '-u'
  end

  # Validate command-line options.
  [:from, :to].each do |sym|
    unless options[sym] =~ IMAP::REGEX_URI
      Trollop.die sym, "must be a valid IMAP URI (e.g. imap://example.com)"
    end
  end

  unless Logger::LEVELS.has_key?(options[:verbosity].to_sym)
    Trollop.die :verbosity, "must be one of: #{Logger::LEVELS.keys.join(', ')}"
  end

  if options[:exclude_file_given]
    filename = options[:exclude_file]

    Trollop.die :exclude_file, ": file not found: #{filename}" unless File.file?(filename)
    Trollop.die :exclude_file, ": file cannot be read: #{filename}" unless File.readable?(filename)
  end

  # Prevent conflicting options from being used.
  if options[:all_given]
    [:all_subscribed, :from_folder, :to_folder].each do |o|
      Trollop.die :all, "may not be used with --#{o.to_s.gsub('_', '-')}" if options["#{o}_given".to_sym]
    end
  end

  if options[:all_subscribed_given]
    [:all, :from_folder, :to_folder].each do |o|
      Trollop.die :all_subscribed, "may not be used with --#{o.to_s.gsub('_', '-')}" if options["#{o}_given".to_sym]
    end
  end

  # Create URIs.
  uri_from = URI(options[:from])
  uri_to   = URI(options[:to])

  # --all and --all-subscribed options override folders specified in URIs
  if options[:all_given] || options[:all_subscribed_given]
    uri_from.path = ''
    uri_to.path   = ''
  end

  # --from-folder and --to-folder options override folders specified in URIs
  if options[:from_folder_given] || options[:to_folder_given]
    uri_from.path = '/' + CGI.escape(options[:from_folder].gsub(/^\//, ''))
    uri_to.path   = '/' + CGI.escape(options[:to_folder].gsub(/^\//, ''))
  end

  # Usernames and passwords specified as arguments override those in the URIs
  uri_from.user     = CGI.escape(options[:from_user]) if options[:from_user]
  uri_from.password = CGI.escape(options[:from_pass]) if options[:from_pass]
  uri_to.user       = CGI.escape(options[:to_user]) if options[:to_user]
  uri_to.password   = CGI.escape(options[:to_pass]) if options[:to_pass]

  # If usernames/passwords aren't specified in either URIs or args, then prompt.
  uri_from.user     ||= CGI.escape(ask("Source username (#{uri_from.host}): "))
  uri_from.password ||= CGI.escape(ask("Source password (#{uri_from.host}): ") {|q| q.echo = false })
  uri_to.user       ||= CGI.escape(ask("Destination username (#{uri_to.host}): "))
  uri_to.password   ||= CGI.escape(ask("Destination password (#{uri_to.host}): ") {|q| q.echo = false })

  # Go go go!
  init(
    options[:verbosity],
    options[:exclude] ? options[:exclude].flatten : [],
    options[:exclude_file]
  )

  Net::IMAP.debug = true if @log.level == :insane

  imap_from = Larch::IMAP.new(uri_from,
      :dry_run     => options[:dry_run],
      :fast_scan   => options[:fast_scan],
      :max_retries => options[:max_retries],
      :ssl_certs   => options[:ssl_certs] || nil,
      :ssl_verify  => options[:ssl_verify],
      :unread      => options[:unread]
  )

  imap_to = Larch::IMAP.new(uri_to,
      :create_mailbox => !options[:no_create_folder] && !options[:dry_run],
      :dry_run        => options[:dry_run],
      :fast_scan      => options[:fast_scan],
      :max_retries    => options[:max_retries],
      :ssl_certs      => options[:ssl_certs] || nil,
      :ssl_verify     => options[:ssl_verify],
      :unread         => nil
  )

  unless RUBY_PLATFORM =~ /mswin|mingw|bccwin|wince|java/
    begin
      for sig in [:SIGINT, :SIGQUIT, :SIGTERM]
        trap(sig) { @log.fatal "Interrupted (#{sig})"; Kernel.exit }
      end
    rescue => e
    end
  end

  if options[:all_given]
    copy_all(imap_from, imap_to)
  elsif options[:all_subscribed_given]
    copy_all(imap_from, imap_to, true)
  else
    copy_folder(imap_from, imap_to)
  end
end
